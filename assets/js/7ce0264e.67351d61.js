"use strict";(self.webpackChunkyield_docs=self.webpackChunkyield_docs||[]).push([[704],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,k=p["".concat(s,".").concat(m)]||p[m]||c[m]||o;return n?r.createElement(k,l(l({ref:t},u),{},{components:n})):r.createElement(k,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5652:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return c}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={},s=void 0,d={unversionedId:"developers/contracts/strategy/Strategy",id:"developers/contracts/strategy/Strategy",title:"Strategy",description:"The Pool contract exchanges base for fyToken at a price defined by a specific formula.",source:"@site/docs/developers/contracts/strategy/Strategy.md",sourceDirName:"developers/contracts/strategy",slug:"/developers/contracts/strategy/",permalink:"/yield-docs/developers/contracts/strategy/",draft:!1,editUrl:"https://github.com/iamsahu/yield-docs/tree/master/docs/developers/contracts/strategy/Strategy.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Transfer1155Module",permalink:"/yield-docs/developers/contracts/other/notional/Transfer1155Module"},next:{title:"Giver",permalink:"/yield-docs/developers/contracts/utils/Giver"}},u={},c=[{value:"Functions",id:"functions",level:2},{value:"constructor",id:"constructor",level:3},{value:"setYield",id:"setyield",level:3},{value:"setTokenId",id:"settokenid",level:3},{value:"resetTokenJoin",id:"resettokenjoin",level:3},{value:"startPool",id:"startpool",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"endPool",id:"endpool",level:3},{value:"mint",id:"mint",level:3},{value:"burn",id:"burn",level:3},{value:"burnForBase",id:"burnforbase",level:3},{value:"Events",id:"events",level:2},{value:"YieldSet",id:"yieldset",level:3},{value:"TokenJoinReset",id:"tokenjoinreset",level:3},{value:"TokenIdSet",id:"tokenidset",level:3},{value:"PoolEnded",id:"poolended",level:3},{value:"PoolStarted",id:"poolstarted",level:3}],p={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Pool contract exchanges base for fyToken at a price defined by a specific formula."),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"constructor"},"constructor"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  function constructor(\n  ) public\n")),(0,o.kt)("h3",{id:"setyield"},"setYield"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  function setYield(\n  ) external\n")),(0,o.kt)("p",null,"Use with extreme caution, only for Ladle replacements\nSet a new Ladle and Cauldron"),(0,o.kt)("h3",{id:"settokenid"},"setTokenId"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  function setTokenId(\n  ) external\n")),(0,o.kt)("p",null,"Use with extreme caution, only for token reconfigurations in Cauldron\nSet a new base token id"),(0,o.kt)("h3",{id:"resettokenjoin"},"resetTokenJoin"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  function resetTokenJoin(\n  ) external\n")),(0,o.kt)("p",null,"Use with extreme caution, only for Join replacements\nReset the base token join"),(0,o.kt)("h3",{id:"startpool"},"startPool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  function startPool(\n    bytes6 seriesId_,\n    uint256 minRatio,\n    uint256 maxRatio\n  ) external\n")),(0,o.kt)("p",null,"When calling this function for the first pool, some underlying needs to be transferred to the strategy first, using a batchable router.\nStart the strategy investments in the next pool"),(0,o.kt)("h4",{id:"parameters"},"Parameters:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"seriesId_")),(0,o.kt)("td",{parentName:"tr",align:"left"},"bytes6"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Yield v2 seriesId for the pool to invest in.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"minRatio")),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Minimum allowed ratio between the reserves of the next pool, as a fixed point number with 18 decimals (base/fyToken)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"maxRatio")),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Maximum allowed ratio between the reserves of the next pool, as a fixed point number with 18 decimals (base/fyToken)")))),(0,o.kt)("h3",{id:"endpool"},"endPool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  function endPool(\n  ) external\n")),(0,o.kt)("p",null,"Divest out of a pool once it has matured"),(0,o.kt)("h3",{id:"mint"},"mint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  function mint(\n  ) external returns (uint256 minted)\n")),(0,o.kt)("p",null,"The lp tokens that the user contributes need to have been transferred previously, using a batchable router.\nMint strategy tokens."),(0,o.kt)("h3",{id:"burn"},"burn"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  function burn(\n  ) external returns (uint256 withdrawal)\n")),(0,o.kt)("p",null,"The strategy tokens that the user burns need to have been transferred previously, using a batchable router.\nBurn strategy tokens to withdraw lp tokens. The lp tokens obtained won't be of the same pool that the investor deposited,\nif the strategy has swapped to another pool."),(0,o.kt)("h3",{id:"burnforbase"},"burnForBase"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  function burnForBase(\n  ) external returns (uint256 withdrawal)\n")),(0,o.kt)("p",null,"The strategy tokens that the user burns need to have been transferred previously, using a batchable router.\nBurn strategy tokens to withdraw base tokens. It can be called only when a pool is not selected."),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("h3",{id:"yieldset"},"YieldSet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  event YieldSet(\n  )\n")),(0,o.kt)("h3",{id:"tokenjoinreset"},"TokenJoinReset"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  event TokenJoinReset(\n  )\n")),(0,o.kt)("h3",{id:"tokenidset"},"TokenIdSet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  event TokenIdSet(\n  )\n")),(0,o.kt)("h3",{id:"poolended"},"PoolEnded"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  event PoolEnded(\n  )\n")),(0,o.kt)("h3",{id:"poolstarted"},"PoolStarted"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"  event PoolStarted(\n  )\n")))}m.isMDXComponent=!0}}]);