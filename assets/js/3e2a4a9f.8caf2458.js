"use strict";(self.webpackChunkyield_docs=self.webpackChunkyield_docs||[]).push([[5285],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},c=Object.keys(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),i=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=i(e.components);return a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=i(r),m=n,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||c;return r?a.createElement(f,l(l({ref:t},s),{},{components:r})):a.createElement(f,l({ref:t},s))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,l=new Array(c);l[0]=p;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var i=2;i<c;i++)l[i]=r[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8159:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return d}});var a=r(7462),n=r(3366),c=(r(7294),r(3905)),l=["components"],o={},u="AccumulatorMultiOracle",i={unversionedId:"developers/contracts/oracles/accumulator/AccumulatorMultiOracle",id:"developers/contracts/oracles/accumulator/AccumulatorMultiOracle",title:"AccumulatorMultiOracle",description:"A collection of independent Accumulator Oracles",source:"@site/docs/developers/contracts/oracles/accumulator/AccumulatorMultiOracle.md",sourceDirName:"developers/contracts/oracles/accumulator",slug:"/developers/contracts/oracles/accumulator/AccumulatorMultiOracle",permalink:"/yield-docs/developers/contracts/oracles/accumulator/AccumulatorMultiOracle",draft:!1,editUrl:"https://github.com/iamsahu/yield-docs/tree/master/docs/developers/contracts/oracles/accumulator/AccumulatorMultiOracle.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Witch",permalink:"/yield-docs/developers/contracts/Witch"},next:{title:"AggregatorV3Interface",permalink:"/yield-docs/developers/contracts/oracles/chainlink/AggregatorV3Interface"}},s={},d=[{value:"Accumulator",id:"accumulator",level:3},{value:"sources",id:"sources",level:3},{value:"SourceSet",id:"sourceset",level:3},{value:"PerSecondRateUpdated",id:"persecondrateupdated",level:3},{value:"setSource",id:"setsource",level:3},{value:"updatePerSecondRate",id:"updatepersecondrate",level:3},{value:"peek",id:"peek",level:3},{value:"get",id:"get",level:3}],p={toc:d};function m(e){var t=e.components,r=(0,n.Z)(e,l);return(0,c.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"accumulatormultioracle"},"AccumulatorMultiOracle"),(0,c.kt)("p",null,"A collection of independent Accumulator Oracles"),(0,c.kt)("p",null,"Each Accumulator is simple: it starts when ",(0,c.kt)("inlineCode",{parentName:"p"},"setSource")," is called,\nand each ",(0,c.kt)("inlineCode",{parentName:"p"},"get")," call returns perSecondRate ^ (time in seconds since oracle creation)"),(0,c.kt)("h3",{id:"accumulator"},"Accumulator"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Accumulator {\n  uint256 perSecondRate;\n  uint256 accumulated;\n  uint256 lastUpdated;\n}\n")),(0,c.kt)("h3",{id:"sources"},"sources"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes6 => mapping(bytes6 => struct AccumulatorMultiOracle.Accumulator)) sources\n")),(0,c.kt)("h3",{id:"sourceset"},"SourceSet"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"event SourceSet(bytes6 baseId, bytes6 kind, uint256 startRate, uint256 perSecondRate)\n")),(0,c.kt)("h3",{id:"persecondrateupdated"},"PerSecondRateUpdated"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"event PerSecondRateUpdated(bytes6 baseId, bytes6 kind, uint256 perSecondRate)\n")),(0,c.kt)("h3",{id:"setsource"},"setSource"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"function setSource(bytes6 baseId, bytes6 kindId, uint256 startRate, uint256 perSecondRate) external\n")),(0,c.kt)("p",null,"Set a source\n@param baseId: base to set the source for\n@param kindId: kind of oracle (example: chi/rate)\n@param startRate: rate the oracle starts with\n@param perSecondRate: secondly rate"),(0,c.kt)("h3",{id:"updatepersecondrate"},"updatePerSecondRate"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"function updatePerSecondRate(bytes6 baseId, bytes6 kindId, uint256 perSecondRate) external\n")),(0,c.kt)("p",null,"Updates accumulation rate"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"The accumulation rate can only be updated on an up-to-date oracle: get() was called in the\nsame block. See get() for more details\n")),(0,c.kt)("h3",{id:"peek"},"peek"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"function peek(bytes32 base, bytes32 kind, uint256) external view virtual returns (uint256 accumulated, uint256 updateTime)\n")),(0,c.kt)("p",null,"Retrieve the latest stored accumulated rate."),(0,c.kt)("h3",{id:"get"},"get"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"function get(bytes32 base, bytes32 kind, uint256) external virtual returns (uint256 accumulated, uint256 updateTime)\n")),(0,c.kt)("p",null,"Retrieve the latest accumulated rate from source, updating it if necessary."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Computes baseRate ^ (block.timestamp - creation timestamp)\n\npow() is not O(1), so the naive implementation will become slower as the time passes\nTo workaround that, each time get() is called, we:\n    1) compute the return value\n    2) store the return value in `accumulated` field, update lastUpdated timestamp\n\nBecase we have `accumulated`, step 1 becomes `accumulated * baseRate ^ (block.timestamp - lastUpdated)\n")))}m.isMDXComponent=!0}}]);