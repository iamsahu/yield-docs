"use strict";(self.webpackChunkyield_docs=self.webpackChunkyield_docs||[]).push([[847],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return m}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function u(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},c=Object.keys(e);for(r=0;r<c.length;r++)a=c[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)a=c[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),i=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):u(u({},t),e)),a},s=function(e){var t=i(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=i(a),m=n,f=p["".concat(o,".").concat(m)]||p[m]||d[m]||c;return a?r.createElement(f,u(u({ref:t},s),{},{components:a})):r.createElement(f,u({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,u=new Array(c);u[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,u[1]=l;for(var i=2;i<c;i++)u[i]=a[i];return r.createElement.apply(null,u)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},7701:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return d}});var r=a(7462),n=a(3366),c=(a(7294),a(3905)),u=["components"],l={},o="AccumulatorMultiOracle",i={unversionedId:"oracles/accumulator/AccumulatorMultiOracle",id:"oracles/accumulator/AccumulatorMultiOracle",title:"AccumulatorMultiOracle",description:"A collection of independent Accumulator Oracles",source:"@site/docs/oracles/accumulator/AccumulatorMultiOracle.md",sourceDirName:"oracles/accumulator",slug:"/oracles/accumulator/AccumulatorMultiOracle",permalink:"/docs/oracles/accumulator/AccumulatorMultiOracle",draft:!1,editUrl:"https://github.com/iamsahu/yield-docs/tree/main/packages/create-docusaurus/templates/shared/docs/oracles/accumulator/AccumulatorMultiOracle.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Witch",permalink:"/docs/Witch"},next:{title:"AggregatorV3Interface",permalink:"/docs/oracles/chainlink/AggregatorV3Interface"}},s={},d=[{value:"Accumulator",id:"accumulator",level:3},{value:"sources",id:"sources",level:3},{value:"SourceSet",id:"sourceset",level:3},{value:"PerSecondRateUpdated",id:"persecondrateupdated",level:3},{value:"setSource",id:"setsource",level:3},{value:"updatePerSecondRate",id:"updatepersecondrate",level:3},{value:"peek",id:"peek",level:3},{value:"get",id:"get",level:3}],p={toc:d};function m(e){var t=e.components,a=(0,n.Z)(e,u);return(0,c.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"accumulatormultioracle"},"AccumulatorMultiOracle"),(0,c.kt)("p",null,"A collection of independent Accumulator Oracles"),(0,c.kt)("p",null,"Each Accumulator is simple: it starts when ",(0,c.kt)("inlineCode",{parentName:"p"},"setSource")," is called,\nand each ",(0,c.kt)("inlineCode",{parentName:"p"},"get")," call returns perSecondRate ^ (time in seconds since oracle creation)"),(0,c.kt)("h3",{id:"accumulator"},"Accumulator"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Accumulator {\n  uint256 perSecondRate;\n  uint256 accumulated;\n  uint256 lastUpdated;\n}\n")),(0,c.kt)("h3",{id:"sources"},"sources"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(bytes6 => mapping(bytes6 => struct AccumulatorMultiOracle.Accumulator)) sources\n")),(0,c.kt)("h3",{id:"sourceset"},"SourceSet"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"event SourceSet(bytes6 baseId, bytes6 kind, uint256 startRate, uint256 perSecondRate)\n")),(0,c.kt)("h3",{id:"persecondrateupdated"},"PerSecondRateUpdated"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"event PerSecondRateUpdated(bytes6 baseId, bytes6 kind, uint256 perSecondRate)\n")),(0,c.kt)("h3",{id:"setsource"},"setSource"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"function setSource(bytes6 baseId, bytes6 kindId, uint256 startRate, uint256 perSecondRate) external\n")),(0,c.kt)("p",null,"Set a source\n@param baseId: base to set the source for\n@param kindId: kind of oracle (example: chi/rate)\n@param startRate: rate the oracle starts with\n@param perSecondRate: secondly rate"),(0,c.kt)("h3",{id:"updatepersecondrate"},"updatePerSecondRate"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"function updatePerSecondRate(bytes6 baseId, bytes6 kindId, uint256 perSecondRate) external\n")),(0,c.kt)("p",null,"Updates accumulation rate"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"The accumulation rate can only be updated on an up-to-date oracle: get() was called in the\nsame block. See get() for more details\n")),(0,c.kt)("h3",{id:"peek"},"peek"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"function peek(bytes32 base, bytes32 kind, uint256) external view virtual returns (uint256 accumulated, uint256 updateTime)\n")),(0,c.kt)("p",null,"Retrieve the latest stored accumulated rate."),(0,c.kt)("h3",{id:"get"},"get"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"function get(bytes32 base, bytes32 kind, uint256) external virtual returns (uint256 accumulated, uint256 updateTime)\n")),(0,c.kt)("p",null,"Retrieve the latest accumulated rate from source, updating it if necessary."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Computes baseRate ^ (block.timestamp - creation timestamp)\n\npow() is not O(1), so the naive implementation will become slower as the time passes\nTo workaround that, each time get() is called, we:\n    1) compute the return value\n    2) store the return value in `accumulated` field, update lastUpdated timestamp\n\nBecase we have `accumulated`, step 1 becomes `accumulated * baseRate ^ (block.timestamp - lastUpdated)\n")))}m.isMDXComponent=!0}}]);