"use strict";(self.webpackChunkyield_docs=self.webpackChunkyield_docs||[]).push([[1102],{3905:function(t,e,a){a.d(e,{Zo:function(){return k},kt:function(){return o}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var m=n.createContext({}),d=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},k=function(t){var e=d(t.components);return n.createElement(m.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},N=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,m=t.parentName,k=p(t,["components","mdxType","originalType","parentName"]),N=d(a),o=r,s=N["".concat(m,".").concat(o)]||N[o]||u[o]||l;return a?n.createElement(s,i(i({ref:e},k),{},{components:a})):n.createElement(s,i({ref:e},k))}));function o(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=N;var p={};for(var m in e)hasOwnProperty.call(e,m)&&(p[m]=e[m]);p.originalType=t,p.mdxType="string"==typeof t?t:r,i[1]=p;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}N.displayName="MDXCreateElement"},7065:function(t,e,a){a.r(e),a.d(e,{assets:function(){return k},contentTitle:function(){return m},default:function(){return o},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return u}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],p={},m=void 0,d={unversionedId:"developers/contracts/yieldspace/Math64x64",id:"developers/contracts/yieldspace/Math64x64",title:"Math64x64",description:"*",source:"@site/docs/developers/contracts/yieldspace/Math64x64.md",sourceDirName:"developers/contracts/yieldspace",slug:"/developers/contracts/yieldspace/Math64x64",permalink:"/yield-docs/developers/contracts/yieldspace/Math64x64",draft:!1,editUrl:"https://github.com/iamsahu/yield-docs/tree/master/docs/developers/contracts/yieldspace/Math64x64.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Exp64x64",permalink:"/yield-docs/developers/contracts/yieldspace/Exp64x64"},next:{title:"Pool",permalink:"/yield-docs/developers/contracts/yieldspace/Pool"}},k={},u=[{value:"Functions",id:"functions",level:2},{value:"fromInt",id:"fromint",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Return Values:",id:"return-values",level:4},{value:"toInt",id:"toint",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Return Values:",id:"return-values-1",level:4},{value:"fromUInt",id:"fromuint",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"Return Values:",id:"return-values-2",level:4},{value:"toUInt",id:"touint",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"Return Values:",id:"return-values-3",level:4},{value:"from128x128",id:"from128x128",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"Return Values:",id:"return-values-4",level:4},{value:"to128x128",id:"to128x128",level:3},{value:"Parameters:",id:"parameters-5",level:4},{value:"Return Values:",id:"return-values-5",level:4},{value:"add",id:"add",level:3},{value:"Parameters:",id:"parameters-6",level:4},{value:"Return Values:",id:"return-values-6",level:4},{value:"sub",id:"sub",level:3},{value:"Parameters:",id:"parameters-7",level:4},{value:"Return Values:",id:"return-values-7",level:4},{value:"mul",id:"mul",level:3},{value:"Parameters:",id:"parameters-8",level:4},{value:"Return Values:",id:"return-values-8",level:4},{value:"muli",id:"muli",level:3},{value:"Parameters:",id:"parameters-9",level:4},{value:"Return Values:",id:"return-values-9",level:4},{value:"mulu",id:"mulu",level:3},{value:"Parameters:",id:"parameters-10",level:4},{value:"Return Values:",id:"return-values-10",level:4},{value:"div",id:"div",level:3},{value:"Parameters:",id:"parameters-11",level:4},{value:"Return Values:",id:"return-values-11",level:4},{value:"divi",id:"divi",level:3},{value:"Parameters:",id:"parameters-12",level:4},{value:"Return Values:",id:"return-values-12",level:4},{value:"divu",id:"divu",level:3},{value:"Parameters:",id:"parameters-13",level:4},{value:"Return Values:",id:"return-values-13",level:4},{value:"neg",id:"neg",level:3},{value:"Parameters:",id:"parameters-14",level:4},{value:"Return Values:",id:"return-values-14",level:4},{value:"abs",id:"abs",level:3},{value:"Parameters:",id:"parameters-15",level:4},{value:"Return Values:",id:"return-values-15",level:4},{value:"inv",id:"inv",level:3},{value:"Parameters:",id:"parameters-16",level:4},{value:"Return Values:",id:"return-values-16",level:4},{value:"avg",id:"avg",level:3},{value:"Parameters:",id:"parameters-17",level:4},{value:"Return Values:",id:"return-values-17",level:4},{value:"gavg",id:"gavg",level:3},{value:"Parameters:",id:"parameters-18",level:4},{value:"Return Values:",id:"return-values-18",level:4},{value:"pow",id:"pow",level:3},{value:"Parameters:",id:"parameters-19",level:4},{value:"Return Values:",id:"return-values-19",level:4},{value:"sqrt",id:"sqrt",level:3},{value:"Parameters:",id:"parameters-20",level:4},{value:"Return Values:",id:"return-values-20",level:4},{value:"log_2",id:"log_2",level:3},{value:"Parameters:",id:"parameters-21",level:4},{value:"Return Values:",id:"return-values-21",level:4},{value:"ln",id:"ln",level:3},{value:"Parameters:",id:"parameters-22",level:4},{value:"Return Values:",id:"return-values-22",level:4},{value:"exp_2",id:"exp_2",level:3},{value:"Parameters:",id:"parameters-23",level:4},{value:"Return Values:",id:"return-values-23",level:4},{value:"exp",id:"exp",level:3},{value:"Parameters:",id:"parameters-24",level:4},{value:"Return Values:",id:"return-values-24",level:4}],N={toc:u};function o(t){var e=t.components,a=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,n.Z)({},N,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Smart contract library of mathematical functions operating with signed\n64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\nbasically a simple fraction whose numerator is signed 128-bit integer and\ndenominator is 2^64.  As long as denominator is always the same, there is no\nneed to store it, thus in Solidity signed 64.64-bit fixed point numbers are\nrepresented by int128 type holding only the numerator.\n/")),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("h3",{id:"fromint"},"fromInt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function fromInt(\n    int256 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Convert signed 256-bit integer number into signed 64.64-bit fixed point\nnumber.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 256-bit integer number")))),(0,l.kt)("h4",{id:"return-values"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"toint"},"toInt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toInt(\n    int128 x\n  ) internal returns (int64)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Convert signed 64.64 fixed point number into signed 64-bit integer number\nrounding down.")),(0,l.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-1"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64-bit integer number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"fromuint"},"fromUInt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function fromUInt(\n    uint256 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\nnumber.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"unsigned 256-bit integer number")))),(0,l.kt)("h4",{id:"return-values-2"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"touint"},"toUInt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function toUInt(\n    int128 x\n  ) internal returns (uint64)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Convert signed 64.64 fixed point number into unsigned 64-bit integer\nnumber rounding down.  Revert on underflow.")),(0,l.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-3"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"unsigned")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64-bit integer number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"from128x128"},"from128x128"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function from128x128(\n    int256 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\nnumber rounding down.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 128.128-bin fixed point number")))),(0,l.kt)("h4",{id:"return-values-4"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"to128x128"},"to128x128"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function to128x128(\n    int128 x\n  ) internal returns (int256)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Convert signed 64.64 fixed point number into signed 128.128 fixed point\nnumber.")),(0,l.kt)("h4",{id:"parameters-5"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-5"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"128.128 fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"add"},"add"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function add(\n    int128 x,\n    int128 y\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate x + y.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-6"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-6"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"sub"},"sub"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function sub(\n    int128 x,\n    int128 y\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate x - y.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-7"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-7"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"mul"},"mul"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function mul(\n    int128 x,\n    int128 y\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate x * y rounding down.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-8"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-8"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"muli"},"muli"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function muli(\n    int128 x,\n    int256 y\n  ) internal returns (int256)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\nnumber and y is signed 256-bit integer number.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-9"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64 fixed point number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 256-bit integer number")))),(0,l.kt)("h4",{id:"return-values-9"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"256-bit integer number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"mulu"},"mulu"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function mulu(\n    int128 x,\n    uint256 y\n  ) internal returns (uint256)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate x * y rounding down, where x is signed 64.64 fixed point number\nand y is unsigned 256-bit integer number.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-10"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64 fixed point number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"unsigned 256-bit integer number")))),(0,l.kt)("h4",{id:"return-values-10"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"unsigned")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"256-bit integer number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"div"},"div"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function div(\n    int128 x,\n    int128 y\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate x / y rounding towards zero.  Revert on overflow or when y is\nzero.")),(0,l.kt)("h4",{id:"parameters-11"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-11"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"divi"},"divi"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function divi(\n    int256 x,\n    int256 y\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate x / y rounding towards zero, where x and y are signed 256-bit\ninteger numbers.  Revert on overflow or when y is zero.")),(0,l.kt)("h4",{id:"parameters-12"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 256-bit integer number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 256-bit integer number")))),(0,l.kt)("h4",{id:"return-values-12"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"divu"},"divu"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function divu(\n    uint256 x,\n    uint256 y\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\ninteger numbers.  Revert on overflow or when y is zero.")),(0,l.kt)("h4",{id:"parameters-13"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"unsigned 256-bit integer number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"unsigned 256-bit integer number")))),(0,l.kt)("h4",{id:"return-values-13"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"neg"},"neg"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function neg(\n    int128 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate -x.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-14"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-14"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"abs"},"abs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function abs(\n    int128 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate |x|.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-15"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-15"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"inv"},"inv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function inv(\n    int128 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\nzero.")),(0,l.kt)("h4",{id:"parameters-16"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-16"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"avg"},"avg"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function avg(\n    int128 x,\n    int128 y\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.")),(0,l.kt)("h4",{id:"parameters-17"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-17"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"gavg"},"gavg"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function gavg(\n    int128 x,\n    int128 y\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate geometric average of x and y, i.e. sqrt (x ",(0,l.kt)("em",{parentName:"li"}," y) rounding down.\nRevert on overflow or in case x ")," y is negative.")),(0,l.kt)("h4",{id:"parameters-18"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-18"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"pow"},"pow"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function pow(\n    int128 x,\n    uint256 y\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\nand y is unsigned 256-bit integer number.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-19"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256 value")))),(0,l.kt)("h4",{id:"return-values-19"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"sqrt"},"sqrt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function sqrt(\n    int128 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate sqrt (x) rounding down.  Revert if x < 0.")),(0,l.kt)("h4",{id:"parameters-20"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-20"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"log_2"},"log_2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function log_2(\n    int128 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate binary logarithm of x.  Revert if x <= 0.")),(0,l.kt)("h4",{id:"parameters-21"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-21"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"ln"},"ln"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function ln(\n    int128 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate natural logarithm of x.  Revert if x <= 0.")),(0,l.kt)("h4",{id:"parameters-22"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-22"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"exp_2"},"exp_2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function exp_2(\n    int128 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate binary exponent of x.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-23"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-23"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"),(0,l.kt)("h3",{id:"exp"},"exp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"  function exp(\n    int128 x\n  ) internal returns (int128)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Calculate natural exponent of x.  Revert on overflow.")),(0,l.kt)("h4",{id:"parameters-24"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"signed 64.64-bit fixed point number")))),(0,l.kt)("h4",{id:"return-values-24"},"Return Values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"signed")),(0,l.kt)("td",{parentName:"tr",align:"left"},"int128"),(0,l.kt)("td",{parentName:"tr",align:"left"},"64.64-bit fixed point number")))),(0,l.kt)("p",null,"/"))}o.isMDXComponent=!0}}]);